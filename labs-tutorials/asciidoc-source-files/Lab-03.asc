= Lab 3.0 â€“ Handling UI Events

== Objective
By the time this lab is complete, our Yamba app will be able to handle basic UI events.

== Overview
In this lab, we will cover the following concepts:

* Handling basic UI events

* Wiring up button handlers (two different ways)

* Hotwiring explicit subscription to events

* Setting +onClick+ listener

* Wiring up +onTextChanged+ handler

* Adding +onTextChanged+ listener

* Updating the text field to show how many characters are left

* Updating the color

* Adding resource strings

* Adding color resources

* Adding constant number resources

== Setup
Lab 2.0 has been completed. 

== Steps
. Hotwire the on-click listener in the main activity layout.  
+
NOTE: Edit +/res/layout/activity_post_status_update.xml+.
+
[source, xml]
----
android:onClick="buttonPostStatus />
----
. Create the on-click event handler stub in the main activity class for Post Status button on the main activity layout.   Add a basic log message to the stub.
+
TIP:  It's useful to build your program and check log outputs after creating logs in your code.

. Retrieve a reference to the status message edit text on the main activity layout.   You can then subscribe to the text changed events on the status message edit text.

. There is an alternate way to subscribe to the events.  Demonstrate it.

. Add a log message (to +onTextChanged+ event) to show that the status message edit text event is being handled.

.. Run it and examine the log for the output.

. Next, we'll create and (and hook up our +onTextChanged+ handler) to a +textView+ which updates our remaining character count.  To do this:
..  Pull up the local variable holding a reference to the +editTextStatusMessage+ .
+
NOTE: A local variable, +editTextStatusMessage+ is declared and assigned in the +onCreate+ function. This should, for future usage plans, have the scope expanded to be a class field.

. Next, we'll update the log message to show the number of characters remaining.

. You might find it useful to refactor some code at this point.
.. First, refactor the hard-coded maximum number of characters value.
+
The maximum number of characters permitted in a status message is a hard-coded number in the +onTextChanged+ event handler function. It would be better if this were a value that could be changed via a resource value.
... Create a new +app/source/main/res/values/constants.xml+ resource file.  Create a new integer resource for the maximum characters allowed:
+
[cols="2", width="35%"]
|===

|+maximumCharacters+
|+140+

|===
+
TIP:  It's helpful, at this point, to refactor the code using your IDE's build-in tools to be consistent.
+
TIP:  You can create a log message to test if your number of characters remaining drops below zero.

. Now, you can pre-populate your status message edit text.

. Next, we will create functionality that changes text colour of our +textViewRemainingCharacters+ if the user enters too many characters in to the status message edit text.

. At this stage, we should refactor our code to move hardcoded values to XML resources, and color-code the field.
+
NOTE: Add the following to +/res/values/constants.xml+:
+
[cols="2", width="35%"]
|===

|+warningLength+
|+20+
                       
|+warningColor+
|+#FF0+

|===

